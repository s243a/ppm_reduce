#!/bin/bash
#
# MapReduce framework in bash / awk / parallel
#
# Implement your own map and reduce functions in awk
# The framework will take care of the rest
#
# @author anton.sorhus@gmail.com
set -x
cd "$(dirname "$0")"
USAGE="Usage: bash-reduce [-m mode] [-v var=val] [-p params] mapper reducer input"
source ./util/ppm-reduce-functions


function usage() {
    printf "%s\n%s\n" "$USAGE" "Try 'bash-reduce -h' for more information."
    exit 1
}

function help() {
  printf "%s\n  * %s\n  * %s\n  * %s\n  * %s\n  * %s\n  * %s%s\n" \
    "$USAGE" \
    "[-m mode]: (s)equential, (l)ocal or (c)luster. local and cluster requires GNU parallel. cluster also requires cluster.config file. Defaults to sequential" \
    "[-v var=val]: variables passed on to the awk scripts." \
    "[-p params]: parameters passed on to parallel." \
    "mapper: file containing map function in awk." \
    "reducer: file containing reduce function in awk." \
    "input: file containing input data for the job." \
    ""
    exit 0
}

function die() {
  echo $1
  exit 2
}

while getopts hm:v:p: OPTION; do
    case "$OPTION" in
        h)  help
            ;;
        m)  if [[ $OPTARG == "s" || $OPTARG == "sequential" ]]; then
                . core/sequential
            elif [[ $OPTARG == "l" || $OPTARG == "local" ]]; then
                . core/parallel
            elif [[ $OPTARG == "c" || $OPTARG == "cluster" ]]; then
                parallel_flags="--sshloginfile cluster.config --controlmaster --sshdelay 0.01 --progress"
                . core/parallel
            else
                usage
            fi
            ;;
        v)  awk_variables="$awk_variables -v $OPTARG"
            #set +x
            #read -p "Press enter to continue"
            #set -x
            ;;
        p)  parallel_flags="$parallel_flags $OPTARG"
            ;;
        ?)  usage
            ;;
   esac
done
shift $(($OPTIND - 1))

# Default to sequential
type -t execute &> /dev/null || . core/sequential

# Check required args
if [[ $# -ne 3 ]]; then
    usage
fi
for p in $1 $2 $3; do
    stat $p &> /dev/null || die "Can't read $p"
done

if [ ! -x "$1" ]; then #TODO: Allow for $1 to contain both a command and args. 
   map="$(<$1)"
   if [ -z "$MAPPER_INTERPRETER" ]; then   
     #if [ -z "$awk_variables" ]; then
      # MAPPER_INTERPRETER="awk"
     #else
     #  MAPPER_INTERPRETER="awk $awk_variables"
     #fi
     [ -z "$MAP_ARGS"] && [ ${#awk_variables} -gt 0 ] &&  MAPPER_ARGS="${awk_variables}"
   fi
   MAPPER_INTERPRETER="$(echo "$MAPPER_INTERPRETER" | sed -r 's#^(.*[^[:blank:]]+)([[:blank:]]*)$#\1 #g')"
   
else
  #This might be problematic with remote machines.
  map=$1
  map="$(realpath "$map")"  
  unset MAPPER_INTERPRETER
  [ -z "$MAP_ARGS"] && [ ${#awk_variables} -gt 0 ] && [[ $map = *.awk ]] && MAP_ARGS="${awk_variables}"
fi

shuffle="$(realpath "core/shuffle.awk")"
if [ ! -x "$shuffle" ]; then
  shuffle="$(<$shuffle)"
   if [ -z "$SHUFFLE_INTERPRETER" ]; then
   #  if [ -z "$awk_variables" ]; then
       SHUFFLE_INTERPRETER="awk"
   #  else
    #   SHUFFLE_INTERPRETER="awk $awk_variables"
    # fi
    [ -z "$SHUFFLE_ARGS"] && [ ${#awk_variables} -gt 0 ] && SHUFFLE_ARGS="${awk_variables}"
   fi
   SHUFFLE_INTERPRETER="$(echo "$MAPPER_INTERPRETER" | sed -r 's#^(.*[^[:blank:]]+)([[:blank:]]*)$#\1 #g')"  
else
  #This might be problematic with remote machines.
  shuffle="$(realpath "$shuffle")"
  SHUFFLE_INTERPRETER=""
  [ -z "$SHUFFLE_ARGS" ] && [ ${#awk_variables} -gt 0 ] && [[ $map = *.awk ]] && SHUFFLE_ARGS="${awk_variables}"
fi

if [ ! -x "$2" ]; then
   reduce="$(<$2)"
   if [ -z "$REDUCER_INTERPRETER" ]; then
     #if [ -z "$awk_variables" ]; then   
       REDUCER_INTERPRETER="awk"
     #else
     #  REDUCER_INTERPRETER="awk $awk_variables"
     #fi
     [ -z "$REDUCER_ARGS"] && [ ${#awk_variables} -gt 0 ] && REDUCER_ARGS="${awk_variables}"
  fi  
  REDUCER_INTERPRETER="$(echo "$REDUCER_INTERPRETER" | sed -r 's#^(.*[^[:blank:]]+)([[:blank:]]*)$#\1 #g')"
else
  #This might be problematic with remote machines.
  reduce="$2"
  reduce="$(realpath "$2")"
  REDUCER_INTERPRETER=""
  [ -z "$REDUCER_ARGS" ] && [ ${#awk_variables} -gt 0 ] && [[ $map = *.awk ]] && REDUCER_ARGS="${awk_variables}"
fi

set -x

input=$(lcat $3 | head -n 1)

#input=$3
    set +x
(    
cat <<EOF
function execute() {
    1st_or_2nd "$MAPPER_INTERPRETER" "$map" "$MAPPER_ARGS" < "$input"  | \
    sort -t '|' -k1 | \
    1st_or_2nd "$SHUFFLE_INTERPRETER" "$shuffle" "$SHUFFLE_ARGS" | \
    1st_or_2nd "$REDUCER_INTERPRETER" "$reduce" "$REDUCER_ARGS" | \
    sort -t '|' -k1 
}   
EOF
) >&2
    
    echo "Bash Reduce, ready to execute"
    read -p "Press enter to continue"
    set -x
#(
#  exec 4<"$input"
  execute "$input" "$awk_variables" "$parallel_flags"
#  fsync &4
#) 
#exec 3<&-
#exec 4<&-
    set +x
    echo "Finished Executing"
    read -p "Press enter to continue"
    set -x




